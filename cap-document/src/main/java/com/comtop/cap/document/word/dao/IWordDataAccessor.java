/******************************************************************************
 * Copyright (C) 2015 ShenZhen ComTop Information Technology Co.,Ltd
 * All Rights Reserved.
 * 本软件为深圳康拓普开发研制。未经本公司正式书面同意，其他任何个人、团体不得使用、
 * 复制、修改或发布本软件.
 *****************************************************************************/

package com.comtop.cap.document.word.dao;

import java.util.List;

/**
 * 模型数据存取
 *
 * @author lizhiyong
 * @since jdk1.6
 * @version 2015年11月10日 lizhiyong
 * @param <T> 需要持久化的对象
 */
public interface IWordDataAccessor<T> {
    
    /**
     * 持久化数据。 因为在导入数据时会先加载已有的数据，然后再根据文档创建新数据。因此，集合中可能本身就有两类数据，需要区分处理。
     * 已经加载了的数据，在导入文档时如果成功进行了前端过滤操作，则需要执行更新持久化。如果已经加载了数据，
     * 但没有成功进行过滤，则需要进行后端过滤合并 <br>
     * 例如：<br>
     * 1）对于业务事项、业务流程，基本上可以通过名称匹配完成前端过滤，所以集合中可能只有一种更新数据，如果有新增，表明确实有新的数据了。<br>
     * 2）但对于流程节点则有区别：在进行表格数据处理时，可以根据名称与编号进行前端过滤，最终的处理方式可能与业务事项一样，但在进行章节中的流程节点时，<br>
     * 3）由于章节标题中多个相同含义的流程节点写为一个章节，因此无法过滤，则对流程节点要进行后端合并。合并流程节点时，流程节点下的业务关联、业务表单、业务对象等都要进行合并<br>
     * 4）另外，有些数据是在文档章节中具体定义的，可以以其为准进行导入，而这些数据的汇总表数据可以放弃，但有些数据是在汇总表中定义的，
     * 比如流程与业务约束，这些定义的数据是将一个有层次的数据进行了扁平化处理 ，因此在导入时需要一级一级往上找，最终找到对应的数据后进行合并，
     * 合并完最上级后再一级 一级往下合并，最终建立起正确的关系，并保证数据不会重复。 <br>
     * <br>
     * 目前，在同一个业务域下面的最顶元素是业务事项，业务事项下有业务流程。由于文档本身 质量不高，事实上相同的流程名称可能名称不完全一致。目前采用绝对相等的匹配方式，会导致出现一些不能匹配的情况。
     * 另外，由于写文档者本身的疏忽，同一个流程在不同的章节可能会挂不到同的业务事项下，目前也没有处理。<br/>
     * 上述要求需要在此方法中进行进行考虑并实现。<br/>
     * 思路：<br/>
     * 1）对传递过来的集合进行迭代<br/>
     * 2) 对每一条数据，从缓存索引信中查找其关联的对象的id（如果关联对象的索引未初始化，则进行初始化）。如果从缓存索引中找到关联对象，直接使用。
     * 如果未找到，则调用关联对象的服务类进行创建，并且将新建的数据加入缓存索引集中<br/>
     * 3）组装当前对象自己的非Id的唯一标识，以该标识在缓存索引集中进行查找。找到表明当前数据已经存在，执行更新操作。否则执行新增操作。
     * 4）对象自己的非ID唯一标识 ，包括对象关联的其它对象的id、对象自己的名称、编号等组成的一个字符串。要求能够唯一标识该对象。
     * 5）在组装对象自己的缓存索引集时，也应该以4）中指定的唯一标识为Key，id为value。便于查找对象是否已经存在。
     * 
     * @param collection word中解析的模型数据
     */
    void saveData(List<T> collection);
    
    /**
     * 据据条件加载数据,用于三种场景
     * 1）导出
     * 2）导入时加载已经存在的数据
     * 3）文档管理中打开文档页面上的数据展示
     *
     * @param condition 条件集
     * @return 加载的数据结构 List 表示对象集合
     */
    List<T> loadData(T condition);
    
    /**
     * 根据Id更新指定属性，用于保存 文档管理中打开文档页面上的数据编辑后的值
     *
     * @param id 对象id
     * @param property 属性名
     * @param value 值
     */
    void updatePropertyByID(String id, String property, Object value);
}
