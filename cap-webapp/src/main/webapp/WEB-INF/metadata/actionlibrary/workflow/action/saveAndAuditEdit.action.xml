<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<action>
    <modelId>actionlibrary.workflow.action.saveAndAuditEdit</modelId>
    <modelName>saveAndAuditEdit</modelName>
    <modelPackage>actionlibrary.workflow</modelPackage>
    <modelType>action</modelType>
    <cname>编辑页面保存并上报行为</cname>
	<description>上报单条记录，一般在编辑页面使用</description>
	<propertyEditor>auto</propertyEditor>
	<propertyEditorPage></propertyEditorPage>
	<js>
		<list>/cap/dwr/engine.js</list>
		<list>/cap/dwr/util.js</list>
		<list>/cap/dwr/interface/CapWorkflowAction.js</list>
		<list>/cap/rt/common/workflow/comtop.cap.rt.workflow.js</list>
	</js>
	<script>
	<![CDATA[
//{{cname}} {{description}}
function {{ename}}(){
	//校验前操作
	<script name="before"/>
	var saveContinue={{methodOption.saveContinue}};
	if(cap.validateForm()){
		cap.beforeSave();
		//提交数据前操作
		<script name="sendBefore"/>
		var paramArray = [];
		var paramsStr = '${methodParameter}';
		if(paramsStr != ''){
			paramArray = paramsStr.split(',');
		}
		var aliasEntityId = '{{methodOption.aliasEntityId}}';
		aliasEntityId = aliasEntityId != '' ? aliasEntityId :  '{{methodOption.entityId}}';
		var dwrInvokeParam = cap.getDwrInvokeParam(aliasEntityId,'{{methodOption.actionMethodName}}',paramArray);
		var result;
		dwr.TOPEngine.setAsync(false);
		${modelName}Action.dwrInvoke(dwrInvokeParam,{callback:function(_result){
			//赋值前操作
			result = _result;
			if(""!="{{methodOption.returnValueBind}}"){
				eval("{{methodOption.returnValueBind}}=_result");
			}
			
			//重新读取保存数据
			var reLoadParamArray =[];
			cap.formId = result;
			reLoadParamArray.push("cap.formId");
			<script name="setDataBefore"/>
			//此处为重新读取实体方法，返回对象必须是当前实体对象
			var dwrInvokeReLoadParam = cap.getDwrInvokeParam(aliasEntityId,'{{methodOption.actionReLoadMethodName}}',reLoadParamArray);
			${modelName}Action.dwrInvoke(dwrInvokeReLoadParam,{callback:function(result){
				//TODO 数据设置前操作
				${methodParameter}=result;
				//TODO 数据设置后操作
				<script name="setDataAfter"/>
				
			},
				errorHandler:function(message, exception){
				   //TODO 后台异常信息回调
				   <script name="errorHandler"/>
				}
			});
			//工作流上报操作
			var getData = function(){
				var entryData = [];
	        	if(cap.validateForm()){
	         		cap.beforeSave();
	         		var selectDataTmp = '${methodParameter}';
	         		 if(selectDataTmp != ''){
	        		  entryData[0] = window[selectDataTmp];//选择数据集
	        		 }
	        		//TODO 此处编写校验脚步
	        		<script name="check"/>
	        	}
	       		return entryData;
			}; 
			//定义上报完成后的回调方法（该方法在完成上报操作后被调用。
			//该方法有一个入参，是后台上报方法的返回值。
			//通常在此回调方法中进行提示、刷新或跳转页面）
			//flowOperateCallback 是流程处理提交的业务数据后的回调处理方法。
		    var flowOperateCallback = function(){
		     var rsMsg = '操作成功！'
    		<script name="rsMsg"/>
			    cui.message(rsMsg, 'success', {'callback':function(){
							//TODO 此处可编写上报成功的回调处理逻辑
							<script name="callBack"/>
							//默认保存成功
							if(saveContinue==1){
								window.location=window.location;
								<script name="saveContinue"/>
							}else if(saveContinue==2){
								<script name="saveClose"/>
								window.close();
							}else if(saveContinue==4){
								var reloadURL = window.location.href;
								var localURL = window.location.href;
								if(localURL.indexOf("?")>0){
									if(localURL.indexOf("primaryValue")<0){
										reloadURL = localURL +"&primaryValue="+{{methodOption.returnValueBind}}; 
									}
								}else{
									reloadURL = localURL +"?primaryValue="+{{methodOption.returnValueBind}}; 
								}
								<script name="saveReload"/>
								window.location.href=reloadURL;
							}
						}});
		    	};
		    if(cap.validateForm()){
				cap.rt10.workflow.operate.{{methodOption.workflowMethod}}(false,getData,flowOperateCallback);
			}
    	},
    	errorHandler:function(message, exception){
		   //TODO 后台异常信息回调
		   var type = 'error';
		   var message ="保存失败,存在异常信息:"+message;
		   <script name="saveErrorHandler"/>
		   cui.message(message);
		}
    	});
    	dwr.TOPEngine.setAsync(true);
	}
	//TODO 可自定义设置返回值
	<script name="setReturnVal"/>
}]]>
	</script>
	<properties>
		<property>
			<cname>后台保存方法</cname>
			<ename>actionMethodName</ename>
			<type>String</type>
			<requried>true</requried>
			<default></default>
			<description>后台保存方法</description>
			<propertyEditorUI>
				<componentName>cui_clickinput</componentName>
				<script>
				<![CDATA[ 
					{
						'id': 'actionMethodName',
						'ng-model':'actionMethodName',
						'onclick':'openEntityMethodSelectWindow()'
					}
				]]>
				</script>
			</propertyEditorUI>
			<consistencyConfig>
				<checkConsistency>true</checkConsistency>
				<checkClass>com.comtop.cap.bm.metadata.consistency.action.property.CallServiceMethodPageActionProConsisCheck</checkClass>
			</consistencyConfig>
		</property>
		<property>
			<cname>后台读取方法ID</cname>
			<ename>actionReLoadMethodId</ename>
			<type>String</type>
			<hide>true</hide>
			<requried>false</requried>
			<default></default>
			<description>后台读取方法ID</description>
		</property>
		<property>
			<cname>后台读取方法</cname>
			<ename>actionReLoadMethodName</ename>
			<type>String</type>
			<requried>true</requried>
			<default></default>
			<description>后台读取方法</description>
			<propertyEditorUI>
				<componentName>cui_clickinput</componentName>
				<script>
				<![CDATA[ 
					{
						'id': 'actionReLoadMethodName',
						'ng-model':'actionReLoadMethodName',
						'onclick':'openEntityMethodSelectWindow('+'false,false,'+'\'saveAndAudit\''+')'
					}
				]]>
				</script>
			</propertyEditorUI>
		</property>
		<property>
			<cname>页面刷新方式</cname>
			<ename>saveContinue</ename>
			<type>Number</type>
			<requried>true</requried>
			<default>2</default>
			<description>页面刷新方式</description>
			<propertyEditorUI>
				<componentName>cui_pulldown</componentName>
				<script>
				<![CDATA[ 
					{
						'id': 'saveContinue',
						'ng-model':'saveContinue',
						'datasource':"[{id:1,text:'保存继续'},{id:2,text:'关闭窗口'},{id:3,text:'不刷新'},{id:4,text:'保存并刷新'}]",
						'value_field':'id',
						'label_field':'text'
					}
				]]>
				</script>
			</propertyEditorUI>
		</property>
		<property>
			<cname>保存成功提示</cname>
			<ename>successMessage</ename>
			<type>String</type>
			<requried>true</requried>
			<default>保存成功！</default>
			<description>是否保存继续</description>
			<propertyEditorUI>
				<componentName>cui_input</componentName>
				<script>
				<![CDATA[ 
					{
						'id': 'successMessage',
						'ng-model':'successMessage'
					}
				]]>
				</script>
			</propertyEditorUI>
		</property>	
		<property>
			<cname>流程审批方法</cname>
			<ename>workflowMethod</ename>
			<type>String</type>
			<requried>true</requried>
			<default>send</default>
			<description>流程审批方法</description>
			<!--下拉框-->
			<propertyEditorUI>
				<componentName>cui_pulldown</componentName>
				<script>
				<![CDATA[ 
					{
						'id': 'workflowMethod',
						'ng-model':'workflowMethod',
						'datasource':"[{id:'report',text:'上报'},{id:'send',text:'发送'}]",
						'value_field':'id',
						'label_field':'text'
					}
				]]>
				</script>
			</propertyEditorUI>
		</property>
		<property>
			<cname>行为类型</cname>
			<ename>actionType</ename>
			<type>String</type>
			<requried>true</requried>
			<default>editSaveAndReport</default>
			<description>行为类型</description>
			<propertyEditorUI>
				<componentName>cui_pulldown</componentName>
				<script>
				<![CDATA[ 
				{
				'id': 'actionType',
				'ng-model':'actionType',
				'datasource':"[{id:'editLink', text:'编辑链接'},{id:'save', text:'保存'},{id:'insertGrid', text:'grid新增'},{id:'deleteGrid', text:'grid删除'},{id:'insert', text:'新增'},{id:'delete', text:'删除'},{id:'update', text:'修改'},{id:'query', text:'查询'},{id:'view', text:'查看'},{id:'report', text:'上报'},{id:'send', text:'下发'},{id:'back', text:'回退'},{id:'undo', text:'撤回'},{id:'editReport', text:'编辑上报'},{id:'editSend', text:'编辑下发'},{id:'editSaveAndReport', text:'编辑保存并上报'},{id:'editSaveAndSend', text:'编辑保存并发送'}]",
				'value_field':'id',
				'label_field':'text'
				}
				]]>
				</script>
			</propertyEditorUI>
			</property>
	</properties>
	<consistencyConfig>
		<checkConsistency>true</checkConsistency>
		<checkClass>com.comtop.cap.bm.metadata.consistency.action.CallServiceMethodPageActionConsisCheck</checkClass>
	</consistencyConfig>
</action>